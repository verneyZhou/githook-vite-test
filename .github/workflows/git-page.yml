name: Github Pages Deploy # workflow 名称

# 设置触发条件
on:
  #监听push操作
  push:
    branches:
      - main # 这里只配置了main分支，所以只有推送main分支才会触发以下任务


# 设置权限为write，这样才能推送代码到仓库，否则会报错
permissions:
  contents: write

# 任务，可以有多个
jobs:
  # 任务ID，可以自定义
  build-and-deploy:
    # 运行环境
    runs-on: ubuntu-latest # 构建环境使用 ubuntu
    # 步骤
    steps:
      # 官方action，将代码拉取到虚拟机
      - name: Checkout   
        uses: actions/checkout@v3

      - name: Install and Build   # 安装依赖、打包，如果提前已打包好无需这一步
        run: |
          npm install
          npm run build
          pwd & ls

      - name: Deploy   # 部署， 将打包内容发布到 github page
        uses: JamesIves/github-pages-deploy-action@3.7.1 # 使用别人写好的 actions
        with:  # 自定义环境变量
          ACCESS_TOKEN: ${{ secrets.GITHOOK_VITE_TEST }}  # github token，需要在仓库的 secrets 中配置
          BRANCH: feature/git-page # 部署到哪个分支
          FOLDER: dist # 打包后的文件夹
        #   REPOSITORY_NAME: verneyzhou/verneyzhou.github.io # 这是我的 github page 仓库
        #   TARGET_FOLDER: githook-vite-test # 打包的文件将放到静态服务器 githook-vite-test 目录下


  zip-and-release: # 生成压缩包并发版
    needs: build-and-deploy # 依赖linter任务
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v2
        with:
          node-version: 16

      - name: Cache
        # 缓存命中结果会存储在steps.[id].outputs.cache-hit里，该变量在继后的step中可读
        id: cache-dependencies
        uses: actions/cache@v3
        with:
          path: ./node_modules # 缓存文件目录的路径
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }} # key中定义缓存标志位的生成方式。runner.OS指当前环境的系统
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install npm dependencies
        # 如果缓存标志位没命中，则执行该step。否则就跳过该step
        if: steps.cache-dependencies.outputs.cache-hit != 'true'
        run: npm install

      # 从package.json里获取version属性的值
      # 在CD Workflow中会给每个生成的制品打上标签，而标签取值于version值
      - name: Read Version
        # 读取出来的值会放在steps.[id].outputs.value供其他步骤step读取
        id: version
        uses: ashley-taylor/read-json-property-action@v1.0
        with:
          path: ./package.json
          property: version

      

      # 打包, 压缩制品，压缩到bundle.zip压缩包里
      - name: Building
        run: |
          npm run build
          pwd & ls
          zip -r bundle ./dist/**

      # 基于当前commit进行版本发布(Create a release)，tag_name是v前缀加上package.json的version值
      - name: Create GitHub Release
        # 此步骤中，版本发布后会返回对应的url，以供下面上传制品的步骤中读取使用
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHOOK_VITE_TEST }}
        with:
          tag_name: v${{steps.version.outputs.value}}
          release_name: v${{steps.version.outputs.value}}
          draft: false
          prerelease: false

      # 把bundle.zip上传到仓库对应的发布版本Release上
      - name: Update Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHOOK_VITE_TEST }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./bundle.zip
          asset_name: bundle.zip
          asset_content_type: application/zip # 格式


